{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n  getSourceCoordsArr(dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n    return cond;\n  }\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return '';\n    }\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      return `getA(rc),\n              rc + 1 >= ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]} ? 0. : getA(rc + 1),\n              0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/pack_gpu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition =\n          this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms? 'outShape' :\n          this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms? `outShape[${i}]` :\n         this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms? `outShape[${this.rank} - 1]` :\n        this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms? `outShape[${this.rank} - 2]` :\n         this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      return `getA(rc),\n              rc + 1 >= ${this.enableShapeUniforms? 'outShape' :\n                  this.outputShape[0]} ? 0. : getA(rc + 1),\n              0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}