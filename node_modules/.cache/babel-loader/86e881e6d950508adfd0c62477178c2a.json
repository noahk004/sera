{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n  constructor(begin, strides, size) {\n    this.variableNames = ['x'];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(',');\n    }\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAO,mBAAmB,CAAA;EAK9B,WAAA,CAAY,KAAe,EAAE,OAAiB,EAAE,IAAc,EAAA;IAJ9D,IAAA,CAAA,aAAa,GAAG,CAAC,GAAG,CAAC;IAKnB,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM;IACxB,MAAM,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC;IACjD,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC;IAE5C,IAAI,SAAS,GAAG,EAAE;IAClB,IAAI,IAAI,KAAK,CAAC,EAAE;MACd,SAAS,GAAG,0BAA0B;KACvC,MAAM;MACL,IAAI,UAAU,GAAG,CAAC;MAClB,SAAS,GACL,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;QACZ,UAAU,EAAE;QACZ,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,GACpB,oBAAoB,CAAC,aAAa,CAAC,GAAG,GACtC,UAAU,UAAU,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG;MAC/D,CAAC,CAAC,CACD,IAAI,CAAC,GAAG,CAAC;IACnB;IAED,IAAI,CAAC,QAAQ,GAAG;QACZ,UAAU,YAAY,UAAU,IAAI,KAAK;QACzC,UAAU,cAAc,UAAU,IAAI,OAAO;;;UAG3C,KAAK;yBACU,SAAS;;KAE7B;EACH;AACD","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}