{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\nfunction removeItems(keys) {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nclass BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n      const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(weightBuffer));\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,\n          initializerSignature: modelArtifacts.initializerSignature != null ? modelArtifacts.initializerSignature : undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n        return {\n          modelArtifactsInfo\n        };\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n        throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load() {\n    const info = JSON.parse(this.LS.getItem(this.keys.info));\n    if (info == null) {\n      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n    }\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n    }\n    const out = {};\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);\n    }\n    out.modelTopology = topology;\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString);\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.initializerSignature != null) {\n        out.initializerSignature = metadata.initializerSignature;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n    return out;\n  }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport { BrowserLocalStorage };\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n  async listModels() {\n    const out = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key));\n      }\n    }\n    return out;\n  }\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info));\n    removeItems(keys);\n    return info;\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/local_storage.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(weightBuffer));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          initializerSignature: modelArtifacts.initializerSignature != null ?\n              modelArtifacts.initializerSignature :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.initializerSignature != null) {\n        out.initializerSignature = metadata.initializerSignature;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}