{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { Draw, FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\nlet hasToPixelsWarned = false;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(pixels, numChannels = 3) {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs = {\n      pixels\n    };\n    const attrs = {\n      numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  let vals;\n  if (isCanvasLike) {\n    vals =\n    // tslint:disable-next-line:no-any\n    pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' && typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error('Cannot parse input in current context. ' + 'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext('2d', {\n          willReadFrequently: true\n        });\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels) {\n  return pixels != null && pixels.data instanceof Uint8Array;\n}\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' && typeof ImageBitmap !== 'undefined' && window.hasOwnProperty('createImageBitmap');\n}\nfunction isNonEmptyPixels(pixels) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\nfunction canWrapPixelsToImageBitmap(pixels) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(pixels, numChannels = 3) {\n  let inputs = null;\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') && canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await createImageBitmap(pixels, {\n        premultiplyAlpha: 'none'\n      });\n    } catch (e) {\n      imageBitmap = null;\n    }\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n  return fromPixels_(inputs, numChannels);\n}\nfunction validateImgTensor(img) {\n  if (img.rank !== 2 && img.rank !== 3) {\n    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);\n  }\n  const depth = img.rank === 2 ? 1 : img.shape[2];\n  if (depth > 4 || depth === 2) {\n    throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);\n  }\n  if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n    throw new Error(`Unsupported type for toPixels: ${img.dtype}.` + ` Please use float32 or int32 tensors.`);\n  }\n}\nfunction validateImageOptions(imageOptions) {\n  const alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  if (alpha > 1 || alpha < 0) {\n    throw new Error(`Alpha value ${alpha} is suppoed to be in range [0 - 1].`);\n  }\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(img, canvas) {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n  if (canvas != null) {\n    if (!hasToPixelsWarned) {\n      const kernel = getKernel(Draw, ENGINE.backendName);\n      if (kernel != null) {\n        console.warn('tf.browser.toPixels is not efficient to draw tensor on canvas. ' + 'Please try tf.browser.draw instead.');\n        hasToPixelsWarned = true;\n      }\n    }\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n/**\n * Draws a `tf.Tensor` to a canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * @param image The tensor to draw on the canvas. Must match one of\n * these shapes:\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\n *     `imageOptions` (defaults to 1, which is opaque).\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\n * @param canvas The canvas to draw to.\n * @param options The configuration arguments for image to be drawn and the\n *     canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport function draw(image, canvas, options) {\n  let $img = convertToTensor(image, 'img', 'draw');\n  if (!(image instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  validateImageOptions(options === null || options === void 0 ? void 0 : options.imageOptions);\n  const inputs = {\n    image: $img\n  };\n  const attrs = {\n    canvas,\n    options\n  };\n  ENGINE.runKernel(Draw, inputs, attrs);\n}\nexport const fromPixels = /* @__PURE__ */op({\n  fromPixels_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/browser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {Draw, DrawAttrs, DrawInputs, FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DrawOptions, ImageOptions, PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet hasToPixelsWarned = false;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as unknown as NamedTensorMap,\n        attrs as unknown as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext(\n            '2d', {willReadFrequently: true});\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\nfunction validateImgTensor(img: Tensor2D|Tensor3D) {\n  if (img.rank !== 2 && img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${img.rank}.`);\n  }\n  const depth = img.rank === 2 ? 1 : img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if (img.dtype !== 'float32' && img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n}\n\nfunction validateImageOptions(imageOptions: ImageOptions) {\n  const alpha = imageOptions ?.alpha || 1;\n  if (alpha > 1 || alpha < 0) {\n    throw new Error(`Alpha value ${alpha} is suppoed to be in range [0 - 1].`);\n  }\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    if (!hasToPixelsWarned) {\n      const kernel = getKernel(Draw, ENGINE.backendName);\n      if (kernel != null) {\n        console.warn(\n            'tf.browser.toPixels is not efficient to draw tensor on canvas. ' +\n            'Please try tf.browser.draw instead.');\n        hasToPixelsWarned = true;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\n/**\n * Draws a `tf.Tensor` to a canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * @param image The tensor to draw on the canvas. Must match one of\n * these shapes:\n *   - Rank-2 with shape `[height, width`]: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 1]`: Drawn as grayscale.\n *   - Rank-3 with shape `[height, width, 3]`: Drawn as RGB with alpha set in\n *     `imageOptions` (defaults to 1, which is opaque).\n *   - Rank-3 with shape `[height, width, 4]`: Drawn as RGBA.\n * @param canvas The canvas to draw to.\n * @param options The configuration arguments for image to be drawn and the\n *     canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport function draw(\n    image: Tensor2D|Tensor3D|TensorLike, canvas: HTMLCanvasElement,\n    options?: DrawOptions): void {\n  let $img = convertToTensor(image, 'img', 'draw');\n  if (!(image instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  validateImgTensor($img);\n  validateImageOptions(options?.imageOptions);\n\n  const inputs: DrawInputs = {image: $img};\n  const attrs: DrawAttrs = {canvas, options};\n  ENGINE.runKernel(\n      Draw, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const fromPixels = /* @__PURE__ */ op({fromPixels_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}