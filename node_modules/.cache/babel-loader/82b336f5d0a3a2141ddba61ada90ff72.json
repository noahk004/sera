{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAAE,QAAQ,EAAoE,IAAI,QAAO,uBAAuB;AAGpI,SAAQ,eAAe,QAAO,kBAAkB;AAChD,SAAQ,eAAe,QAAO,wBAAwB;AAEtD,SAAQ,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAU,QAAQ,CACpB,IAAyD,EAAA;EAC3D,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,IAAI;EAC9B,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,MAAM;EAEhC,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK;EAClC,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;EACvD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC;EAEnD,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,GAC9C,YAAY,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC;EAEpD,MAAM,cAAc,GAAG,OAAO,CAC1B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAO,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS;IAAC;EAAC,CAAC,CAAC;EAC5E,MAAM,QAAQ,GAAG,OAAO,CAAC;IACvB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAM,CAAC;IACnB,OAAO;IACP,KAAK,EAAE;MAAC,KAAK,EAAE,CAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,SAAS,EAAG,SAAS;IAAC;GAC3E,CAAC;EAEF,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAC7C,MAAM,CAAC,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAe;IAClE,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;IAC5C,MAAM,QAAQ,GAAG,eAAe,CAC5B,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EACrE,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC;IAEtC,OAAO,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC;EAC1E;EACD,MAAM,OAAO,GACT,IAAI,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;EACnE,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAC/B,OAAO,EAAE,CAAC,QAAQ,EAAE,cAAc,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC;EAExD,MAAM,QAAQ,GACV,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAG,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAW;EAAC,CAAC,CAAC;EAErE,OAAO,CAAC,6BAA6B,CAAC,cAAc,CAAC;EACrD,OAAO,CAAC,6BAA6B,CAAC,QAAQ,CAAC;EAC/C,OAAO,CAAC,6BAA6B,CAAC,GAAG,CAAC;EAE1C,OAAO,QAAQ;AACjB;AAEA,OAAO,MAAM,cAAc,GAAiB;EAC1C,UAAU,EAAE,QAAQ;EACpB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}