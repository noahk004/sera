{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Cast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}