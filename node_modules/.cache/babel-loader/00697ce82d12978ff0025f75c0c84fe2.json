{"ast":null,"code":"import { convertToTensor } from '../../tensor_util_env';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { Reduction } from '../loss_ops_utils';\nimport { mean } from '../mean';\nimport { mul } from '../mul';\nimport { notEqual } from '../not_equal';\nimport { ones } from '../ones';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sum } from '../sum';\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ..., dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n  const weightedLoss = $weights == null ? $losses : mul($losses, $weights);\n  if (reduction === Reduction.NONE) {\n    return weightedLoss;\n  }\n  if (reduction === Reduction.SUM) {\n    return sum(weightedLoss);\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = div(sum(weightedLoss), sum($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) : result;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum(weightedLoss), scalar($losses.size));\n    } else {\n      const broadcastedWeights = mul($weights, ones($losses.shape));\n      const numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n      return div(sum(weightedLoss), numNonZeros);\n    }\n  }\n  throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = /* @__PURE__ */op({\n  computeWeightedLoss_\n});","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/ops/losses/compute_weighted_loss.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAe,QAAO,uBAAuB;AAGrD,SAAQ,IAAI,QAAO,SAAS;AAC5B,SAAQ,GAAG,QAAO,QAAQ;AAC1B,SAAQ,SAAS,QAAO,mBAAmB;AAC3C,SAAQ,IAAI,QAAO,SAAS;AAC5B,SAAQ,GAAG,QAAO,QAAQ;AAC1B,SAAQ,QAAQ,QAAO,cAAc;AACrC,SAAQ,IAAI,QAAO,SAAS;AAC5B,SAAQ,EAAE,QAAO,cAAc;AAC/B,SAAQ,MAAM,QAAO,WAAW;AAChC,SAAQ,GAAG,QAAO,QAAQ;AAE1B;;;;;;;;;;AAUG;AACH,SAAS,oBAAoB,CACzB,MAAoB,EAAE,OAA2B,EACjD,SAAS,GAAG,SAAS,CAAC,sBAAsB,EAAA;EAC9C,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAC;EACxE,IAAI,QAAQ,GAAW,IAAI;EAC3B,IAAI,OAAO,IAAI,IAAI,EAAE;IACnB,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,qBAAqB,CAAC;EACtE;EAED,MAAM,YAAY,GAAI,QAAQ,IAAI,IAAI,GAAI,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;EAE1E,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;IAChC,OAAO,YAAiB;EACzB;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,GAAG,EAAE;IAC/B,OAAO,GAAG,CAAC,YAAY,CAAC;EACzB;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;IAChC,IAAI,QAAQ,IAAI,IAAI,EAAE;MACpB,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B,MAAM;MACL,MAAM,eAAe,GAAG,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI;MACpD,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;MACpD,OAAO,eAAe,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,GACpC,MAAW;IACzC;EACF;EACD,IAAI,SAAS,KAAK,SAAS,CAAC,sBAAsB,EAAE;IAClD,IAAI,QAAQ,IAAI,IAAI,EAAE;MACpB,OAAO,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACpD,MAAM;MACL,MAAM,kBAAkB,GAAG,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;MAE7D,MAAM,WAAW,GACb,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC;MACjE,OAAO,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,WAAW,CAAC;IAC3C;EACF;EAED,MAAM,KAAK,CAAC,sBAAsB,SAAS,EAAE,CAAC;AAChD;AACA,OAAO,MAAM,mBAAmB,GAAG,eAAgB,EAAE,CAAC;EAAC;AAAoB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\n\nimport {cast} from '../cast';\nimport {div} from '../div';\nimport {Reduction} from '../loss_ops_utils';\nimport {mean} from '../mean';\nimport {mul} from '../mul';\nimport {notEqual} from '../not_equal';\nimport {ones} from '../ones';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {sum} from '../sum';\n\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ..., dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_<T extends Tensor, O extends Tensor>(\n    losses: T|TensorLike, weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n  }\n\n  const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n\n  if (reduction === Reduction.NONE) {\n    return weightedLoss as O;\n  }\n  if (reduction === Reduction.SUM) {\n    return sum(weightedLoss);\n  }\n  if (reduction === Reduction.MEAN) {\n    if ($weights == null) {\n      return mean(weightedLoss);\n    } else {\n      const broadcastFactor = $losses.size / $weights.size;\n      const result = div(sum(weightedLoss), sum($weights));\n      return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                                   result as O;\n    }\n  }\n  if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    if ($weights == null) {\n      return div(sum(weightedLoss), scalar($losses.size));\n    } else {\n      const broadcastedWeights = mul($weights, ones($losses.shape));\n\n      const numNonZeros =\n          cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n      return div(sum(weightedLoss), numNonZeros);\n    }\n  }\n\n  throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = /* @__PURE__ */ op({computeWeightedLoss_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}