{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport class PlatformNode {\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n  fetch(path, requestInits) {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n  now() {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n  encode(text, encoding) {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes, encoding) {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a) {\n    return this.util.types.isFloat32Array(a) || this.util.types.isInt32Array(a) || this.util.types.isUint8Array(a) || this.util.types.isUint8ClampedArray(a);\n  }\n}\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/platforms/platform_node.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAG,QAAO,gBAAgB;AAGlC;AACA,OAAO,MAAM,YAAY,GAAG;EAC1B;EACA,WAAW,EAAE,CAAA,KAAM,OAAO,CAAC,YAAY;CACxC;AAGD,IAAI,WAAoB;AACxB;AACA;AACA,OAAM,SAAU,gBAAgB,CAAA,EAAA;EAC9B,WAAW,GAAG,IAAI;AACpB;AACA,OAAM,SAAU,cAAc,CAAC,OAAgB,EAAA;EAC7C,WAAW,GAAG,OAAO;AACvB;AACA,OAAM,SAAU,cAAc,CAAA,EAAA;EAC5B,OAAO,WAAW;AACpB;AAEA,OAAM,MAAO,YAAY,CAAA;EAKvB,WAAA,CAAA,EAAA;IACE;IACA,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IAC3B;IACA;IACA,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAA,CAAE;EAChD;EAEA,KAAK,CAAC,IAAY,EAAE,YAA0B,EAAA;IAC5C,IAAI,GAAG,CAAA,CAAE,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE;MAC9B,OAAO,GAAG,CAAA,CAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC;IAC9C;IAED,IAAI,WAAW,IAAI,IAAI,EAAE;MACvB,WAAW,GAAG,YAAY,CAAC,WAAW,CAAA,CAAE;IACzC;IACD,OAAO,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC;EACxC;EAEA,GAAG,CAAA,EAAA;IACD,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAA,CAAE;IAC7B,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO;EAC3C;EAEA,MAAM,CAAC,IAAY,EAAE,QAAgB,EAAA;IACnC,IAAI,QAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK,MAAM,EAAE;MAC/C,MAAM,IAAI,KAAK,CACX,sDAAsD,QAAQ,EAAE,CAAC;IACtE;IACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;EACtC;EACA,MAAM,CAAC,KAAiB,EAAE,QAAgB,EAAA;IACxC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,EAAE;IACV;IACD,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;EAC1D;EACA,YAAY,CAAC,CAAU,EAAA;IAErB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IACnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,IAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,IAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAC7C;AACD;AAED,IAAI,GAAG,CAAA,CAAE,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAA,CAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;EACpD,GAAG,CAAA,CAAE,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,YAAY,CAAA,CAAE,CAAC;AAC9C","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a: unknown): a is Float32Array | Int32Array | Uint8Array\n    | Uint8ClampedArray {\n    return this.util.types.isFloat32Array(a)\n      || this.util.types.isInt32Array(a)\n      || this.util.types.isUint8Array(a)\n      || this.util.types.isUint8ClampedArray(a);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}