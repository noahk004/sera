{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/PadV2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAG,EAA4B,KAAK,EAAuC,IAAI,QAAO,uBAAuB;AAGrH,SAAQ,UAAU,QAAO,YAAY;AACrC,SAAQ,gBAAgB,QAAO,mBAAmB;AAClD,SAAQ,IAAI,QAAO,QAAQ;AAE3B,OAAO,MAAM,KAAK,GACb,IAAyE,IACzD;EACX,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,QAAQ;IAAE;EAAa,CAAC,GAAG,KAAK;EAEvC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IACrC;IACA;IACA,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAC5B,CAAC,CAAC,EAAE,CAAC,KACD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IAChE,OAAO,IAAI,CAAC;MACV,OAAO;MACP,KAAK,EAAE;QAAC,KAAK,EAAE,WAAW;QAAE,KAAK,EAAE,aAAa;QAAE,KAAK,EAAE,CAAC,CAAC;MAAK;KACjE,CAAC;EACH;EAED,MAAM,OAAO,GAAG,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,GACxD,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,aAAa,CAAC,GACtD,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,aAAa,CAAC;EACpD,MAAM,YAAY,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC;EACtC,OAAO,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC;AACrE,CAAC;AAET,OAAO,MAAM,WAAW,GAAiB;EACvC,UAAU,EAAE,KAAK;EACjB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}