{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const axes = util.parseAxisParam([dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitsReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitsReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumExpReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const res = realDiv({\n    inputs: {\n      a: b,\n      b: sumExpReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n  return res;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Softmax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAA4B,OAAO,EAA2C,IAAI,QAAO,uBAAuB;AAIpI,SAAQ,GAAG,QAAO,OAAO;AACzB,SAAQ,GAAG,QAAO,OAAO;AACzB,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,GAAG,QAAO,OAAO;AACzB,SAAQ,GAAG,QAAO,OAAO;AAEzB,OAAM,SAAU,OAAO,CAAC,IAIvB,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAM,CAAC,GAAG,MAAM;EACvB,MAAM;IAAC;EAAG,CAAC,GAAG,KAAK;EAEnB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC;EAErD,MAAM,QAAQ,GAAG,GAAG,CAAC;IACnB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAM,CAAC;IACnB,OAAO;IACP,KAAK,EAAE;MAAC,gBAAgB,EAAE,IAAI;MAAE,QAAQ,EAAE;IAAK;GAChD,CAAC;EAEF,MAAM,aAAa,GAAG,YAAY,CAAC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;EAE7E,MAAM,iBAAiB,GACnB,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAQ,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAa;EAAC,CAAC,CAAC;EAC5E,MAAM,CAAC,GACH,GAAG,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE,MAAM;MAAE,CAAC,EAAE;IAAiB,CAAC;IAAE;EAAO,CAAC,CAAe;EAC3E,MAAM,CAAC,GAAG,GAAG,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAC,CAAC;IAAE;EAAO,CAAC,CAAe;EACtD,MAAM,MAAM,GACR,GAAG,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAC,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,IAAI,EAAE,IAAI;MAAE,QAAQ,EAAE;IAAK;EAAC,CAAC,CAAC;EACxE,MAAM,cAAc,GAChB,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAM,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAa;EAAC,CAAC,CAAC;EAE1E,MAAM,GAAG,GACL,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE,CAAC;MAAE,CAAC,EAAE;IAAc,CAAC;IAAE;EAAO,CAAC,CAAe;EAEvE,OAAO,CAAC,6BAA6B,CAAC,QAAQ,CAAC;EAC/C,OAAO,CAAC,6BAA6B,CAAC,iBAAiB,CAAC;EACxD,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;EACxC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;EACxC,OAAO,CAAC,6BAA6B,CAAC,MAAM,CAAC;EAC7C,OAAO,CAAC,6BAA6B,CAAC,cAAc,CAAC;EAErD,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,aAAa,GAAiB;EACzC,UAAU,EAAE,OAAO;EACnB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}