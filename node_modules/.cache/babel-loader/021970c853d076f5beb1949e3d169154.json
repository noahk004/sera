{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  // tslint:disable-next-line: no-any\n  constructor(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {};\n    // Jasmine spies on this in 'environment_test.ts'\n    this.getQueryParams = getQueryParams;\n    this.populateURLFlags();\n  }\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn,\n      setHook\n    };\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);\n    }\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n  getString(flagName) {\n    return this.get(flagName);\n  }\n  getFlags() {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features() {\n    return this.flags;\n  }\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n  populateURLFlags() {\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':');\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\nexport function getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n  const lowerCaseValue = value.toLowerCase();\n  if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {\n    return lowerCaseValue === 'true';\n  } else if (`${+lowerCaseValue}` === lowerCaseValue) {\n    return +lowerCaseValue;\n  } else {\n    return value;\n  }\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/environment.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean|string;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getString(flagName: string): string {\n    return this.get(flagName) as string;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  const lowerCaseValue = value.toLowerCase();\n  if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {\n    return lowerCaseValue === 'true';\n  } else if (`${+ lowerCaseValue}` === lowerCaseValue) {\n    return +lowerCaseValue;\n  } else {\n    return value;\n  }\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}