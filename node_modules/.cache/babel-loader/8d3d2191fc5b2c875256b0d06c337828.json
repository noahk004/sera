{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({\n        kernelMs: util.now() - start\n      });\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/profiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}