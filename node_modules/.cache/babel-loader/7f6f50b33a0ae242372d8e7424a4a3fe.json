{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const toDispose = [];\n  const paddedX = padV2({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapedPaddedX = reshape({\n    inputs: {\n      x: paddedX\n    },\n    backend,\n    attrs: {\n      shape: reshapedPaddedShape\n    }\n  });\n  const paddedXT = transpose({\n    inputs: {\n      x: reshapedPaddedX\n    },\n    backend,\n    attrs: {\n      perm: permutedReshapedPaddedPermutation\n    }\n  });\n  const result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n};\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAA4B,cAAc,EAAyD,IAAI,QAAO,uBAAuB;AAIzJ,SAAQ,KAAK,QAAO,SAAS;AAC7B,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,SAAS,QAAO,aAAa;AAErC,OAAO,MAAM,cAAc,GAAI,IAI9B,IAAgB;EACf,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,UAAU;IAAE;EAAQ,CAAC,GAAG,KAAK;EAEpC,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EACnB,MAAM,uDAAuD,GACzD,iBAAiB,CAAC;EAE1B,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAE/C,MAAM,gBAAgB,GAA4B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,gBAAgB,CAAC,IAAI,CAAC,GAAG,QAAmC,CAAC;EAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IAC3D,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9B;EAED,MAAM,SAAS,GAAG,EAAE;EAEpB,MAAM,OAAO,GAAG,KAAK,CAAC;IACpB,MAAM,EAAE;MAAC;IAAC,CAAC;IACX,OAAO;IACP,KAAK,EAAE;MAAC,QAAQ,EAAE,gBAAgB;MAAE,aAAa,EAAE;IAAC;GACrD,CAAC;EAEF,MAAM,mBAAmB,GACrB,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC;EAEpE,MAAM,iCAAiC,GAAG,YAAY,CAAC,WAAW,CAC9D,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC;EAEzD,MAAM,YAAY,GACd,YAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC;EAE5E,MAAM,eAAe,GAAG,OAAO,CAC3B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAO,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAmB;EAAC,CAAC,CAAC;EAEzE,MAAM,QAAQ,GAAG,SAAS,CAAC;IACzB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAe,CAAC;IAC5B,OAAO;IACP,KAAK,EAAE;MAAC,IAAI,EAAE;IAAiC;GAChD,CAAC;EAEF,MAAM,MAAM,GACR,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAQ,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAY;EAAC,CAAC,CAAC;EAE3E,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;EACvB,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;EAC/B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;EAExB,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;EAEhE,OAAO,MAAM;AACf,CAAC;AAED,OAAO,MAAM,oBAAoB,GAAiB;EAChD,UAAU,EAAE,cAAc;EAC1B,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}