{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { leakyRelu } from './leaky_relu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { sigmoid } from './sigmoid';\nimport { step } from './step';\nimport { sum } from './sum';\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(dy, y, activation) {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n}\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(bias, dyActivation) {\n  let res = dyActivation;\n  const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth, activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/fused_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAO,KAAK,cAAc,MAAM,kBAAkB;AAClD,SAAQ,GAAG,QAAO,OAAO;AAEzB,SAAQ,SAAS,QAAO,cAAc;AACtC,SAAQ,GAAG,QAAO,OAAO;AACzB,SAAQ,KAAK,QAAO,SAAS;AAC7B,SAAQ,IAAI,QAAO,QAAQ;AAC3B,SAAQ,KAAK,QAAO,SAAS;AAC7B,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,IAAI,QAAO,QAAQ;AAC3B,SAAQ,GAAG,QAAO,OAAO;AAEzB;AACA,OAAM,SAAU,oBAAoB,CAChC,EAAU,EAAE,CAAS,EAAE,UAAsB,EAAA;EAC/C,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,KAAK,QAAQ,EAAE;IACjD,OAAO,EAAE;EACV;EACD,IAAI,UAAU,KAAK,MAAM,EAAE;IACzB,OAAO,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;EACxB;EACD,MAAM,IAAI,KAAK,CACX,gDAAgD,UAAU,GAAG,CAAC;AACpE;AAEA;AACA,OAAM,SAAU,oBAAoB,CAChC,IAAY,EAAE,YAAoB,EAAA;EACpC,IAAI,GAAG,GAAG,YAAY;EACtB,MAAM,UAAU,GACZ,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC;EACnE,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;IACzB,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC;EAC3B;EACD,OAAO,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC;AACjC;AAEA,OAAM,SAAU,eAAe,CAC3B,CAAS,EAAE,UAAsB,EAAE,sBAA+B,EAClE,cAAuB,EAAA;EACzB,IAAI,UAAU,KAAK,QAAQ,EAAE;IAC3B,OAAO,CAAC;GACT,MAAM,IAAI,UAAU,KAAK,MAAM,EAAE;IAChC,OAAO,IAAI,CAAC,CAAC,CAAC;GACf,MAAM,IAAI,UAAU,KAAK,KAAK,EAAE;IAC/B,OAAO,GAAG,CAAC,CAAC,CAAC;GACd,MAAM,IAAI,UAAU,KAAK,OAAO,EAAE;IACjC,OAAO,KAAK,CAAC,CAAC,CAAC;GAChB,MAAM,IAAI,UAAU,KAAK,OAAO,EAAE;IACjC,OAAO,KAAK,CAAC,CAAC,EAAE,sBAAsB,CAAC;GACxC,MAAM,IAAI,UAAU,KAAK,WAAW,EAAE;IACrC,OAAO,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC;GACpC,MAAM,IAAI,UAAU,KAAK,SAAS,EAAE;IACnC,OAAO,OAAO,CAAC,CAAC,CAAC;EAClB;EACD,MAAM,IAAI,KAAK,CAAC,4BAA4B,UAAU,GAAG,CAAC;AAC5D;AAEA;AACA,OAAO,MAAM,UAAU,GAAG,CAAC,aAAqB,EAAE,UAAsB,KAAI;EAC1E,MAAM,YAAY,GAAG,aAAa,GAAG,CAAC;EACtC,OAAO,CAAC,YAAY,IAAI,UAAU,KAAK,QAAQ;AACjD,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\nimport * as broadcast_util from './broadcast_util';\nimport {elu} from './elu';\nimport {Activation} from './fused_types';\nimport {leakyRelu} from './leaky_relu';\nimport {mul} from './mul';\nimport {prelu} from './prelu';\nimport {relu} from './relu';\nimport {relu6} from './relu6';\nimport {reshape} from './reshape';\nimport {sigmoid} from './sigmoid';\nimport {step} from './step';\nimport {sum} from './sum';\n\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(\n    dy: Tensor, y: Tensor, activation: Activation): Tensor {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(\n      `Cannot compute gradient for fused activation ${activation}.`);\n}\n\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(\n    bias: Tensor, dyActivation: Tensor): Tensor {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\n\nexport function applyActivation(\n    x: Tensor, activation: Activation, preluActivationWeights?: Tensor,\n    leakyreluAlpha?: number): Tensor {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}