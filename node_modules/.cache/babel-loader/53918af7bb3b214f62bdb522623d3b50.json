{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n  const idbFactory = getIndexedDBFactory();\n  return new Promise((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nclass BrowserIndexedDB {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n  async save(modelArtifacts) {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          // Concatenate all the model weights into a single ArrayBuffer. Large\n          // models (~1GB) have problems saving if they are not concatenated.\n          // TODO(mattSoulanille): Save large models to multiple indexeddb\n          // records.\n          modelArtifacts.weightData = CompositeArrayBuffer.join(modelArtifacts.weightData);\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          let putInfoRequest;\n          try {\n            putInfoRequest = infoStore.put({\n              modelPath: this.modelPath,\n              modelArtifactsInfo\n            });\n          } catch (error) {\n            return reject(error);\n          }\n          let modelTx;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            let putModelRequest;\n            try {\n              putModelRequest = modelStore.put({\n                modelPath: this.modelPath,\n                modelArtifacts,\n                modelArtifactsInfo\n              });\n            } catch (error) {\n              // Sometimes, the serialized value is too large to store.\n              return reject(error);\n            }\n            putModelRequest.onsuccess = () => resolve({\n              modelArtifactsInfo\n            });\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport { BrowserIndexedDB };\nexport const indexedDBRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nexport class BrowserIndexedDBManager {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n        const store = tx.objectStore(INFO_STORE_NAME);\n        // tslint:disable:max-line-length\n        // Need to cast `store` as `any` here because TypeScript's DOM\n        // library does not have the `getAll()` method even though the\n        // method is supported in the latest version of most mainstream\n        // browsers:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n        // tslint:enable:max-line-length\n        // tslint:disable-next-line:no-any\n        const getAllInfoRequest = store.getAll();\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n          resolve(out);\n        };\n        getAllInfoRequest.onerror = error => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n        tx.oncomplete = () => db.close();\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/indexed_db.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n\n          // Concatenate all the model weights into a single ArrayBuffer. Large\n          // models (~1GB) have problems saving if they are not concatenated.\n          // TODO(mattSoulanille): Save large models to multiple indexeddb\n          // records.\n          modelArtifacts.weightData = CompositeArrayBuffer.join(\n              modelArtifacts.weightData);\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          let putInfoRequest: IDBRequest<IDBValidKey>;\n          try {\n            putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          } catch (error) {\n            return reject(error);\n          }\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            let putModelRequest: IDBRequest<IDBValidKey>;\n            try {\n              putModelRequest = modelStore.put({\n                modelPath: this.modelPath,\n                modelArtifacts,\n                modelArtifactsInfo\n              });\n            } catch (error) {\n              // Sometimes, the serialized value is too large to store.\n              return reject(error);\n            }\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}