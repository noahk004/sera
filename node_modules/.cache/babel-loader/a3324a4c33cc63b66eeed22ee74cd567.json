{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Rank;\n(function (Rank) {\n  Rank[\"R0\"] = \"R0\";\n  Rank[\"R1\"] = \"R1\";\n  Rank[\"R2\"] = \"R2\";\n  Rank[\"R3\"] = \"R3\";\n  Rank[\"R4\"] = \"R4\";\n  Rank[\"R5\"] = \"R5\";\n  Rank[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n  UpcastInt32AndMap[\"float32\"] = \"float32\";\n  UpcastInt32AndMap[\"int32\"] = \"int32\";\n  UpcastInt32AndMap[\"bool\"] = \"int32\";\n  UpcastInt32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n  UpcastBoolAndMap[\"float32\"] = \"float32\";\n  UpcastBoolAndMap[\"int32\"] = \"int32\";\n  UpcastBoolAndMap[\"bool\"] = \"bool\";\n  UpcastBoolAndMap[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n  UpcastFloat32AndMap[\"float32\"] = \"float32\";\n  UpcastFloat32AndMap[\"int32\"] = \"float32\";\n  UpcastFloat32AndMap[\"bool\"] = \"float32\";\n  UpcastFloat32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function (UpcastComplex64AndMap) {\n  UpcastComplex64AndMap[\"float32\"] = \"complex64\";\n  UpcastComplex64AndMap[\"int32\"] = \"complex64\";\n  UpcastComplex64AndMap[\"bool\"] = \"complex64\";\n  UpcastComplex64AndMap[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\nexport function upcastType(typeA, typeB) {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n/** Returns the output type after summation. */\nexport function sumOutType(type) {\n  return upcastType(type, 'int32');\n}\nexport function isWebGLData(values) {\n  return values != null && typeof values === 'object' && 'texture' in values && values.texture instanceof WebGLTexture;\n}\nexport function isWebGPUData(values) {\n  return typeof GPUBuffer !== 'undefined' && values != null && typeof values === 'object' && 'buffer' in values && values.buffer instanceof GPUBuffer;\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/types.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** @docalias number[] */\nexport interface ShapeMap {\n  R0: number[];\n  R1: [number];\n  R2: [number, number];\n  R3: [number, number, number];\n  R4: [number, number, number, number];\n  R5: [number, number, number, number, number];\n  R6: [number, number, number, number, number, number];\n}\n\n/** @docalias number[] */\nexport interface ArrayMap {\n  R0: number;\n  R1: number[];\n  R2: number[][];\n  R3: number[][][];\n  R4: number[][][][];\n  R5: number[][][][][];\n  R6: number[][][][][][];\n}\n\nexport interface DataTypeMap {\n  float32: Float32Array;\n  int32: Int32Array;\n  bool: Uint8Array;\n  complex64: Float32Array;\n  string: string[];\n}\n\nexport interface SingleValueMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  complex64: number;\n  string: string;\n}\n\n/** @docalias 'float32'|'int32'|'bool'|'complex64'|'string' */\nexport type DataType = keyof DataTypeMap;\nexport type NumericDataType = 'float32'|'int32'|'bool'|'complex64';\n\nexport type DataTypeFor<T extends number|string|boolean> =\n    T extends number|boolean ? NumericDataType : T extends string ? 'string' :\n                                                                    never;\n\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n/** Tensor data used in tensor creation and user-facing API. */\nexport type DataValues = DataTypeMap[DataType];\n/** The underlying tensor data that gets stored in a backend. */\nexport type BackendValues = Float32Array|Int32Array|Uint8Array|Uint8Array[];\n\nexport enum Rank {\n  R0 = 'R0',\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6'\n}\n\nexport type FlatVector = boolean[]|number[]|TypedArray;\nexport type RegularArray<T> =\n    T[]|T[][]|T[][][]|T[][][][]|T[][][][][]|T[][][][][][];\n\n// tslint:disable-next-line:no-any\nexport interface RecursiveArray<T extends any> {\n  [index: number]: T|RecursiveArray<T>;\n}\n\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nenum UpcastInt32AndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'int32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastBoolAndMap {\n  'float32' = 'float32',\n  'int32' = 'int32',\n  'bool' = 'bool',\n  'complex64' = 'complex64'\n}\n\nenum UpcastFloat32AndMap {\n  'float32' = 'float32',\n  'int32' = 'float32',\n  'bool' = 'float32',\n  'complex64' = 'complex64'\n}\n\nenum UpcastComplex64AndMap {\n  'float32' = 'complex64',\n  'int32' = 'complex64',\n  'bool' = 'complex64',\n  'complex64' = 'complex64'\n}\n\nconst upcastTypeMap = {\n  'float32': UpcastFloat32AndMap,\n  'int32': UpcastInt32AndMap,\n  'bool': UpcastBoolAndMap,\n  'complex64': UpcastComplex64AndMap\n};\n\nexport function upcastType(typeA: DataType, typeB: DataType): DataType {\n  if (typeA === 'string' || typeB === 'string') {\n    if (typeA === 'string' && typeB === 'string') {\n      return 'string';\n    }\n    throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n  }\n  return upcastTypeMap[typeA][typeB];\n}\n\n/** Returns the output type after summation. */\nexport function sumOutType(type: DataType): DataType {\n  return upcastType(type, 'int32');\n}\n\n/** @docalias TypedArray|Array */\nexport type TensorLike =\n    TypedArray|number|boolean|string|RecursiveArray<number|number[]|TypedArray>|\n    RecursiveArray<boolean>|RecursiveArray<string>|Uint8Array[];\nexport type ScalarLike = number|boolean|string|Uint8Array;\n/** @docalias TypedArray|Array */\nexport type TensorLike1D = TypedArray|number[]|boolean[]|string[]|Uint8Array[];\n/** @docalias TypedArray|Array */\nexport type TensorLike2D = TypedArray|number[]|number[][]|boolean[]|boolean[][]|\n    string[]|string[][]|Uint8Array[]|Uint8Array[][];\n/** @docalias TypedArray|Array */\nexport type TensorLike3D = TypedArray|number[]|number[][][]|boolean[]|\n    boolean[][][]|string[]|string[][][]|Uint8Array[]|Uint8Array[][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike4D = TypedArray|number[]|number[][][][]|boolean[]|\n    boolean[][][][]|string[]|string[][][][]|Uint8Array[]|Uint8Array[][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike5D =\n    TypedArray|number[]|number[][][][][]|boolean[]|boolean[][][][][]|string[]|\n    string[][][][][]|Uint8Array[]|Uint8Array[][][][][];\n/** @docalias TypedArray|Array */\nexport type TensorLike6D =\n    TypedArray|number[]|number[][][][][][]|boolean[]|boolean[][][][][][]|\n    string[]|string[][][][][][]|Uint8Array[]|Uint8Array[][][][][];\n\n/** Type for representing image data in Uint8Array type. */\nexport interface PixelData {\n  width: number;\n  height: number;\n  data: Uint8Array;\n}\n\n/**\n * Type for representing all permutations and combinations of 'RGBA' channels.\n */\nexport type WebGLChannels = 'A'|'B'|'G'|'R'|'AB'|'AG'|'AR'|'BA'|'BG'|'BR'|'GA'|\n    'GB'|'GR'|'RA'|'RB'|'RG'|'ABG'|'ABR'|'AGB'|'AGR'|'ARB'|'ARG'|'BAG'|'BAR'|\n    'BGA'|'BGR'|'BRA'|'BRG'|'GAB'|'GAR'|'GBA'|'GBR'|'GRA'|'GRB'|'RAB'|'RAG'|\n    'RBA'|'RBG'|'RGA'|'RGB'|'ABGR'|'ABRG'|'AGBR'|'AGRB'|'ARBG'|'ARGB'|'BAGR'|\n    'BARG'|'BGAR'|'BGRA'|'BRAG'|'BRGA'|'GABR'|'GARB'|'GBAR'|'GBRA'|'GRAB'|\n    'GRBA'|'RABG'|'RAGB'|'RBAG'|'RBGA'|'RGAB'|'RGBA';\n\n/** Type for representing a texture data to create a tensor. */\nexport interface WebGLData {\n  texture: WebGLTexture;\n  height: number;\n  width: number;\n  channels: WebGLChannels;\n}\n\n/**\n * Type for representing a buffer data to create a tensor. Buffer usage should\n * at least support GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC. When\n * zeroCopy is false or undefined (default), this GPUBuffer will be copied to\n * the tensor's resource buffer. When zeroCopy is true, tensor will use this\n * GPUBuffer as tensor's resource buffer, user should not destroy this GPUBuffer\n * until all access is done. If not specified at creating a tensor, tensor type\n * is float32.\n */\nexport interface WebGPUData {\n  buffer: GPUBuffer;\n  zeroCopy?: boolean;\n}\n\nexport function isWebGLData(values: unknown): values is WebGLData {\n  return values != null && typeof values === 'object' && 'texture' in values &&\n      values.texture instanceof WebGLTexture;\n}\nexport function isWebGPUData(values: unknown): values is WebGPUData {\n  return typeof GPUBuffer !== 'undefined' && values != null &&\n      typeof values === 'object' && 'buffer' in values &&\n      values.buffer instanceof GPUBuffer;\n}\n\nexport interface ImageOptions {\n  /**\n   * Optional. A number in range [0-1]. If the image is a 2D tensor or a 3D\n   * tensor with 1 or 3 channels, the alpha channels would set as its value;\n   * otherwise, it would not make effects.\n   */\n  alpha?: number;\n}\n\nexport interface ContextOptions {\n  /**\n   * Optional.  If the canvas has created a context, it would not make effects.\n   * If it is not set, it would be variable based on the current backend.\n   */\n  contextType?: string;\n  /**\n   * Optional. A WebGLContextAttributes configuration. If the canvas has created\n   * a context, it would not make effects.\n   */\n  contextAttributes?: WebGLContextAttributes;\n}\n\nexport interface DrawOptions {\n  /**\n   * Optional. An object of options to customize the values of image tensor.\n   */\n  imageOptions?: ImageOptions;\n  /**\n   * Optional. An object to configure the context of the canvas to draw to.\n   */\n  contextOptions?: ContextOptions;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}