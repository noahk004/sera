{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adagrad';\n  }\n  constructor(learningRate, initialAccumulatorValue = 0.1) {\n    super();\n    this.learningRate = learningRate;\n    this.initialAccumulatorValue = initialAccumulatorValue;\n    this.accumulatedGrads = [];\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(() => fill(value.shape, this.initialAccumulatorValue).variable(trainable))\n        };\n      }\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n        const newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -this.learningRate), value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/optimizers/adagrad_optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {fill} from '../ops/fill';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adagrad';\n  }\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue = add(\n            mul(div(gradient,\n                    sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))),\n                -this.learningRate),\n            value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}