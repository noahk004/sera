{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize() {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values);\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n      return this.handle;\n    });\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n      return stack(result);\n    });\n  }\n  // tslint:disable-next-line: no-any\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/executor/hash_table.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}