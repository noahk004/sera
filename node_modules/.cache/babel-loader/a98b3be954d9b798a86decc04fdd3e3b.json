{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);\n  }\n  let opName = keys[0];\n  const fn = f[opName];\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n  // tslint:disable-next-line:no-any\n  const f2 = (...args) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  });\n  // tslint:disable-next-line:no-any\n  return f2;\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/operation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAM,QAAO,WAAW;AAChC,SAAQ,SAAS,QAAO,SAAS;AAEjC,OAAO,MAAM,eAAe,GAAG,MAAM;AAErC;;;;AAIG;AACH,OAAM,SAAU,EAAE,CAAqB,CAAsB,EAAA;EAC3D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC3B,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IACrB,MAAM,IAAI,KAAK,CACX,6CAA6C,GAC7C,6DAA6D,GAC7D,GAAG,IAAI,CAAC,MAAM,QAAQ,CAAC;EAC5B;EAED,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;EACpB,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;EAEpB;EACA,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACxB,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;EAChD;EAED;EACA,MAAM,GAAG,MAAM,GAAG,eAAe;EAEjC;EACA,MAAM,EAAE,GAAG,CAAC,GAAG,IAAW,KAAI;IAC5B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;IACzB,IAAI;MACF,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;MAC1B,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;QACrB,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC;MACzD;MACD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;MACvB,OAAO,MAAM;KACd,CAAC,OAAO,EAAE,EAAE;MACX,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;MACrB,MAAM,EAAE;IACT;EACH,CAAC;EACD,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,MAAM,EAAE;IAAC,KAAK,EAAE,MAAM;IAAE,YAAY,EAAE;EAAI,CAAC,CAAC;EAEtE;EACA,OAAO,EAAc;AACvB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}