{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Bincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_(x, weights, size) {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n  util.assert($x.dtype === 'int32', () => `Error in bincount: input ` + `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` + `0-length, but got input shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);\n  const inputs = {\n    x: $x,\n    weights: $weights\n  };\n  const attrs = {\n    size\n  };\n  return ENGINE.runKernel(Bincount, inputs, attrs);\n}\nexport const bincount = /* @__PURE__ */op({\n  bincount_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/bincount.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAM,QAAO,WAAW;AAChC,SAAQ,QAAQ,QAAsC,iBAAiB;AAIvE,SAAQ,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAK,IAAI,MAAM,SAAS;AAE/B,SAAQ,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;AAgBG;AACH,SAAS,SAAS,CACd,CAAe,EAAE,OAAqB,EAAE,IAAY,EAAA;EACtD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC;EAC9C,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;EAEhE,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,KAAK,KAAK,OAAO,EACpB,MAAM,2BAA2B,GAC7B,gCAAgC,EAAE,CAAC,KAAK,EAAE,CAAC;EACnD,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,EAAE,MAAM,sCAAsC,IAAI,GAAG,CAAC;EAC3E,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAChD,MAAM,gEAAgE,GAClE,kCAAkC,EAAE,CAAC,KAAK,mBAAmB,GAC7D,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC;EAE7B,MAAM,MAAM,GAAmB;IAAC,CAAC,EAAE,EAAE;IAAE,OAAO,EAAE;EAAQ,CAAC;EACzD,MAAM,KAAK,GAAkB;IAAC;EAAI,CAAC;EAEnC,OAAO,MAAM,CAAC,SAAS,CACnB,QAAQ,EAAE,MAAmC,EAC7C,KAAgC,CAAC;AACvC;AAEA,OAAO,MAAM,QAAQ,GAAG,eAAgB,EAAE,CAAC;EAAC;AAAS,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Bincount, BincountAttrs, BincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_<T extends Tensor1D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number): T {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in bincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () => `Error in bincount: weights must have the same size as input or` +\n          `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: BincountInputs = {x: $x, weights: $weights};\n  const attrs: BincountAttrs = {size};\n\n  return ENGINE.runKernel(\n      Bincount, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const bincount = /* @__PURE__ */ op({bincount_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}