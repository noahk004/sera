{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n// tslint:disable-next-line:no-any\narray,\n// tslint:disable-next-line:no-any\narray2) {\n  if (array.length !== array2.length) {\n    throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\nexport function sum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqualWithNull(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== null && n2[i] !== null && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = counter => 0, maxCounter, scheduleFn) {\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      if (scheduleFn != null) {\n        scheduleFn(tryFn, nextBackoff);\n      } else {\n        // google3 does not allow assigning another variable to setTimeout.\n        // Don't refactor this so scheduleFn has a default value of setTimeout.\n        setTimeout(tryFn, nextBackoff);\n      }\n    };\n    tryFn();\n  });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);\n  }\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  const rank = shape.length;\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n  // Check for valid range\n  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`);\n  // Check for only integers\n  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`);\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {\n    newShape,\n    keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  return getArrayFromDType(dtype, size);\n}\nexport function getArrayFromDType(dtype, size) {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array || values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\nexport function computeStrides(shape) {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n  }\n  return createNestedArray(0, shape, a, isComplex);\n}\nexport function convertBackendValuesAndArrayBuffer(data, dtype) {\n  // If is type Uint8Array[], return it directly.\n  if (Array.isArray(data)) {\n    return data;\n  }\n  if (dtype === 'float32') {\n    return data instanceof Float32Array ? data : new Float32Array(data);\n  } else if (dtype === 'int32') {\n    return data instanceof Int32Array ? data : new Int32Array(data);\n  } else if (dtype === 'bool' || dtype === 'string') {\n    return Uint8Array.from(new Int32Array(data));\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nexport function makeOnesTypedArray(size, dtype) {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(dimSize => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);\n  });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n  //  patch the async calls, so it is possible the obj (patched) is\n  //  comparing to a pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/util_base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, DataTypeMap, FlatVector, NumericDataType, TensorLike, TypedArray, WebGLData, WebGPUData} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n    // tslint:disable-next-line:no-any\n    array: any[]|Uint32Array|Int32Array|Float32Array,\n    // tslint:disable-next-line:no-any\n    array2: any[]|Uint32Array|Int32Array|Float32Array): void {\n  if (array.length !== array2.length) {\n    throw new Error(\n        `Array sizes must match to be shuffled together ` +\n        `First array length was ${array.length}` +\n        `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function swap<T>(\n    object: {[index: number]: T}, left: number, right: number) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqualWithNull(n1: number[], n2: number[]) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== null && n2[i] !== null && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number,\n    scheduleFn?: (functionRef: Function, delay: number) =>\n        void): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      if (scheduleFn != null) {\n        scheduleFn(tryFn, nextBackoff);\n      } else {\n        // google3 does not allow assigning another variable to setTimeout.\n        // Don't refactor this so scheduleFn has a default value of setTimeout.\n        setTimeout(tryFn, nextBackoff);\n      }\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  return getArrayFromDType<D>(dtype, size);\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<string>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike|WebGLData|WebGPUData): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (\n      values instanceof Int32Array || values instanceof Uint8Array ||\n      values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nfunction createNestedArray(\n    offset: number, shape: number[], a: TypedArray, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(\n    shape: number[], a: TypedArray, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${\n        isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\n\nexport function convertBackendValuesAndArrayBuffer(\n    data: BackendValues|ArrayBuffer, dtype: DataType) {\n  // If is type Uint8Array[], return it directly.\n  if (Array.isArray(data)) {\n    return data;\n  }\n  if (dtype === 'float32') {\n    return data instanceof Float32Array ? data : new Float32Array(data);\n  } else if (dtype === 'int32') {\n    return data instanceof Int32Array ? data : new Int32Array(data);\n  } else if (dtype === 'bool' || dtype === 'string') {\n    return Uint8Array.from(new Int32Array(data));\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray<D extends DataType>(\n    shape: number[], dtype: D) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(\n    locs: number[], rank: number, strides: number[]): number {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(\n    index: number, rank: number, strides: number[]): number[] {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs: number[] = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object: any): object is Promise<unknown> {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n  //  patch the async calls, so it is possible the obj (patched) is\n  //  comparing to a pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}