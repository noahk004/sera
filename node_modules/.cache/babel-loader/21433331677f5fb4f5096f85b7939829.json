{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n  constructor(outputShape, blockSize, dataFormat) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n  getHeightCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n  getWidthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n  getDepthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n  getOutputDepthSize() {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n  getInputSamplingString() {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,mBAAmB,CAAA;EAO9B,WAAA,CACI,WAAqB,EAAE,SAAiB,EAAE,UAAyB,EAAA;IAPvE,IAAA,CAAA,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,IAAA,CAAA,WAAW,GAAa,EAAE;IAOxB,IAAI,CAAC,WAAW,GAAG,WAAW;IAC9B,IAAI,CAAC,SAAS,GAAG,SAAS;IAC1B,IAAI,CAAC,UAAU,GAAG,UAAU;IAC5B,IAAI,CAAC,QAAQ,GAAG;;;;gBAIJ,IAAI,CAAC,oBAAoB,CAAA,CAAE;gBAC3B,IAAI,CAAC,mBAAmB,CAAA,CAAE;gBAC1B,IAAI,CAAC,mBAAmB,CAAA,CAAE;;uBAEnB,SAAS;+BACD,SAAS;uBACjB,SAAS;+BACD,SAAS;mCACL,SAAS;UAClC,IAAI,CAAC,kBAAkB,CAAA,CAAE;;;uBAGZ,IAAI,CAAC,sBAAsB,CAAA,CAAE;;;GAGjD;EACD;EAEQ,oBAAoB,CAAA,EAAA;IAC1B,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;IACnB;EACH;EAEQ,mBAAmB,CAAA,EAAA;IACzB,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;IACnB;EACH;EAEQ,mBAAmB,CAAA,EAAA;IACzB,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,WAAW;KACnB,MAAM;MACL,OAAO,WAAW;IACnB;EACH;EAEQ,kBAAkB,CAAA,EAAA;IACxB,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;KAC3B,MAAM;MACL,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC3B;EACH;EAEQ,sBAAsB,CAAA,EAAA;IAC5B,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;MAC9B,OAAO,2BAA2B;KACnC,MAAM;MACL,OAAO,2BAA2B;IACnC;EACH;AACD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}