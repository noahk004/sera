{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n  return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n  const list = [];\n  const seen = new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === 'object';\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/tensor_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAM,QAAO,UAAU;AAE/B,SAAQ,UAAU,QAAO,SAAS;AAClC,SAAQ,MAAM,QAAO,QAAQ;AAE7B,OAAM,SAAU,cAAc,CAAmB,CAAI,EAAE,CAAI,EAAA;EACzD,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,EAAE;IACvB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACd;EACD,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;EAC1C,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC;AAEA,OAAM,SAAU,gBAAgB,CAAC,CAAS,EAAE,CAAS,EAAA;EACnD,MAAM,CACF,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,EACnB,MAAM,2BAA2B,CAAC,CAAC,KAAK,OAAO,GAC3C,WAAW,CAAC,CAAC,KAAK,oBAAoB,CAAC;AACjD;AAEA,OAAM,SAAU,cAAc,CAAC,MAAc,EAAE,UAAoB,EAAA;EACjE,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC;AACjD;AAEA;;;;;;;;;;;AAWG;AACH,OAAM,SAAU,qBAAqB,CAAC,MAAuB,EAAA;EAC3D,MAAM,IAAI,GAAa,EAAE;EACzB,MAAM,IAAI,GAAG,IAAI,GAAG,CAAA,CAAW;EAC/B,mBAAmB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;EACvC,OAAO,IAAI;AACb;AAEA,SAAS,mBAAmB,CACxB,SAA0B,EAAE,IAAc,EAAE,IAAkB,EAAA;EAChE,IAAI,SAAS,IAAI,IAAI,EAAE;IACrB;EACD;EACD,IAAI,SAAS,YAAY,MAAM,EAAE;IAC/B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IACpB;EACD;EACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;IAC1B;EACD;EACD;EACA,MAAM,QAAQ,GAAG,SAAiC;EAClD,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;IACxB,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;MACb,mBAAmB,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACrC;EACF;AACH;AAEA;AACA,SAAS,UAAU,CAAC,GAAQ,EAAA;EAC1B,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,OAAO,GAAG,KAAK,QAAQ;AACtD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  return tensorList.some(x => x.id === tensor.id);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}