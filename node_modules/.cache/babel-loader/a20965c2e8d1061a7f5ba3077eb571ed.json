{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n  const stages = [];\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n  return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {\n      inSize,\n      windowSize,\n      outSize\n    } = reductionStages[i];\n    let program;\n    let previousResult;\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, inSize) : new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, reductionType);\n    }\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,QAA6B,uBAAuB;AAGxE,SAAQ,WAAW,QAAO,aAAa;AACvC,SAAQ,aAAa,QAAO,eAAe;AAI3C;AACA;AACA,SAAS,kBAAkB,CAAC,OAAiB,EAAA;EAE3C,MAAM,MAAM,GAAG,EAAE;EAEjB,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,EAAE;IACrE,MAAM,OAAO,GACT,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;IAClE,MAAM,UAAU,GAAG,YAAY,CAAC,wBAAwB,CAAC,OAAO,CAAC;IACjE,MAAM,CAAC,IAAI,CAAC;MACV,MAAM,EAAE,OAAO;MACf,UAAU;MACV,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU;KACxC,CAAC;EACH;EAED,OAAO,MAAM;AACf;AAEA,OAAM,SAAU,MAAM,CAClB,CAAa,EAAE,KAAe,EAAE,aAA0B,EAC1D,OAAyB,EAAA;EAC3B,MAAM,eAAe,GAAG,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC;EAEnD,IAAI,MAAM,GAAG,CAAC;EACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/C,MAAM;MAAC,MAAM;MAAE,UAAU;MAAE;IAAO,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAExD,IAAI,OAAkC;IACtC,IAAI,cAA0B;IAC9B,IAAI,aAAa,KAAK,MAAM,EAAE;MAC5B,OAAO,GAAG,CAAC,KAAK,CAAC,GACb,IAAI,WAAW,CACX;QAAC,UAAU;QAAE,MAAM;QAAE,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAAE;MAAO,CAAC,EAAE,MAAM,CAAC,GACjE,IAAI,WAAW,CAAC;QAAC,UAAU;QAAE,MAAM;QAAE,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAAE;MAAO,CAAC,CAAC;KAC1E,MAAM;MACL,OAAO,GAAG,IAAI,aAAa,CACvB;QAAC,UAAU;QAAE,MAAM;QAAE,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAAE;MAAO,CAAC,EAAE,aAAa,CAAC;IACzE;IAED,cAAc,GAAG,MAAM;IACvB,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC;IAE1D,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;MACtC,OAAO,CAAC,6BAA6B,CAAC,cAAc,CAAC;IACtD;EACF;EAED,OAAO,MAAM;AACf","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}