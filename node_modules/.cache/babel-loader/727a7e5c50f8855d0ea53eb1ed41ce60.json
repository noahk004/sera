{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer, streamWeights } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nclass HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n    this.loadOptions = loadOptions;\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n    const init = Object.assign({\n      method: this.DEFAULT_METHOD\n    }, this.requestInit);\n    init.body = new FormData();\n    const weightsManifest = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n      type: JSON_TYPE\n    }), 'model.json');\n    if (modelArtifacts.weightData != null) {\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n      init.body.append('model.weights.bin', new Blob([weightBuffer], {\n        type: OCTET_STREAM_MIME_TYPE\n      }), 'model.weights.bin');\n    }\n    const response = await this.fetch(this.path, init);\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n    }\n  }\n  async loadModelJSON() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n    }\n    let modelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);\n    }\n    return modelJSON;\n  }\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load() {\n    if (this.loadOptions.streamWeights) {\n      return this.loadStream();\n    }\n    const modelJSON = await this.loadModelJSON();\n    return getModelArtifactsForJSON(modelJSON, weightsManifest => this.loadWeights(weightsManifest));\n  }\n  async loadStream() {\n    const modelJSON = await this.loadModelJSON();\n    const fetchURLs = await this.getWeightUrls(modelJSON.weightsManifest);\n    const weightSpecs = getWeightSpecs(modelJSON.weightsManifest);\n    const stream = () => streamWeights(fetchURLs, this.loadOptions);\n    return Object.assign(Object.assign({}, modelJSON), {\n      weightSpecs,\n      getWeightStream: stream\n    });\n  }\n  async getWeightUrls(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const fetchURLs = [];\n    const urlPromises = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...(await Promise.all(urlPromises)));\n    }\n    return fetchURLs;\n  }\n  async loadWeights(weightsManifest) {\n    const fetchURLs = await this.getWeightUrls(weightsManifest);\n    const weightSpecs = getWeightSpecs(weightsManifest);\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, this.loadOptions);\n    return [weightSpecs, buffers];\n  }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\nexport { HTTPRequest };\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/http.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs} from './io_utils';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, SaveResult, WeightData, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer, streamWeights} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: typeof fetch;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly loadOptions: LoadOptions;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n    this.loadOptions = loadOptions;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n\n      init.body.append(\n          'model.weights.bin',\n          new Blob([weightBuffer], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  private async loadModelJSON(): Promise<ModelJSON> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return modelJSON;\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    if (this.loadOptions.streamWeights) {\n      return this.loadStream();\n    }\n    const modelJSON = await this.loadModelJSON();\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadStream(): Promise<ModelArtifacts> {\n    const modelJSON = await this.loadModelJSON();\n    const fetchURLs = await this.getWeightUrls(modelJSON.weightsManifest);\n    const weightSpecs = getWeightSpecs(modelJSON.weightsManifest);\n    const stream = () => streamWeights(fetchURLs, this.loadOptions);\n\n    return {\n      ...modelJSON,\n      weightSpecs,\n      getWeightStream: stream,\n    };\n  }\n\n  private async getWeightUrls(weightsManifest: WeightsManifestConfig):\n    Promise<string[]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n    return fetchURLs;\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n    Promise<[WeightsManifestEntry[], WeightData]> {\n    const fetchURLs = await this.getWeightUrls(weightsManifest);\n    const weightSpecs = getWeightSpecs(weightsManifest);\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, this.loadOptions);\n    return [weightSpecs, buffers];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}