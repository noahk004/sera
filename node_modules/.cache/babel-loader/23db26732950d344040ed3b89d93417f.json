{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BitwiseAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { arraysEqual } from '../util_base';\nimport { op } from './operation';\n/**\n * Bitwise `AND` operation for input tensors.\n *\n * Given two input tensors, returns a new tensor\n * with the `AND` calculated values.\n *\n * The method supports int32 values\n *\n *\n * ```js\n * const x = tf.tensor1d([0, 5, 3, 14], 'int32');\n * const y = tf.tensor1d([5, 0, 7, 11], 'int32');\n * tf.bitwiseAnd(x, y).print();\n * ```\n *\n * @param x The input tensor to be calculated.\n * @param y The input tensor to be calculated.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction bitwiseAnd_(x, y) {\n  const $x = convertToTensor(x, 'x', 'bitwiseAnd');\n  const $y = convertToTensor(y, 'y', 'bitwiseAnd');\n  if (!arraysEqual($x.shape, $y.shape)) {\n    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${$x.shape}, y: ${$y.shape}`);\n  }\n  if ($x.dtype !== 'int32' || $y.dtype !== 'int32') {\n    throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${$x.dtype} and type of y: ${$y.dtype}`);\n  }\n  const inputs = {\n    a: $x,\n    b: $y\n  };\n  return ENGINE.runKernel(BitwiseAnd, inputs);\n}\nexport const bitwiseAnd = /* @__PURE__ */op({\n  bitwiseAnd_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/bitwise_and.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAM,QAAO,WAAW;AAChC,SAAQ,UAAU,QAAyB,iBAAiB;AAG5D,SAAQ,eAAe,QAAO,oBAAoB;AAElD,SAAQ,WAAW,QAAO,cAAc;AAExC,SAAQ,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;AAmBG;AACH,SAAS,WAAW,CAAiB,CAAS,EAAE,CAAS,EAAA;EACvD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC;EAChD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,EAAE,YAAY,CAAC;EAEhD,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE;IACpC,MAAM,IAAI,KAAK,CAAC,oDACZ,EAAE,CAAC,KAAK,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC;EAChC;EACD,IAAI,EAAE,CAAC,KAAK,KAAK,OAAO,IAAI,EAAE,CAAC,KAAK,KAAK,OAAO,EAAE;IAChD,MAAM,IAAI,KAAK,CACX,wEACI,EAAE,CAAC,KAAK,mBAAmB,EAAE,CAAC,KAAK,EAAE,CAAC;EAC/C;EAED,MAAM,MAAM,GAAqB;IAAC,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE;EAAE,CAAC;EAC/C,OAAO,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,MAAmC,CAAC;AAC1E;AACA,OAAO,MAAM,UAAU,GAAG,eAAgB,EAAE,CAAC;EAAC;AAAW,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {BitwiseAnd, BitwiseAndInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {Rank} from '../types';\nimport {arraysEqual} from '../util_base';\n\nimport {op} from './operation';\n\n/**\n * Bitwise `AND` operation for input tensors.\n *\n * Given two input tensors, returns a new tensor\n * with the `AND` calculated values.\n *\n * The method supports int32 values\n *\n *\n * ```js\n * const x = tf.tensor1d([0, 5, 3, 14], 'int32');\n * const y = tf.tensor1d([5, 0, 7, 11], 'int32');\n * tf.bitwiseAnd(x, y).print();\n * ```\n *\n * @param x The input tensor to be calculated.\n * @param y The input tensor to be calculated.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction bitwiseAnd_<R extends Rank>(x: Tensor, y: Tensor): Tensor<R> {\n  const $x = convertToTensor(x, 'x', 'bitwiseAnd');\n  const $y = convertToTensor(y, 'y', 'bitwiseAnd');\n\n  if (!arraysEqual($x.shape, $y.shape)) {\n    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${\n        $x.shape}, y: ${$y.shape}`);\n  }\n  if ($x.dtype !== 'int32' || $y.dtype !== 'int32') {\n    throw new Error(\n        `BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${\n            $x.dtype} and type of y: ${$y.dtype}`);\n  }\n\n  const inputs: BitwiseAndInputs = {a: $x, b: $y};\n  return ENGINE.runKernel(BitwiseAnd, inputs as unknown as NamedTensorMap);\n}\nexport const bitwiseAnd = /* @__PURE__ */ op({bitwiseAnd_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}