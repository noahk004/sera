{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n  const flat = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n  const out = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n  return out;\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Diag.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAI,EAAoD,IAAI,QAAO,uBAAuB;AAGlG,SAAQ,WAAW,QAAO,aAAa;AACvC,SAAQ,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAU,IAAI,CAAC,IAAqD,EAAA;EAExE,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,IAAI;EAC9B,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAElB,MAAM,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;EACzC,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;EAEzC,MAAM,IAAI,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC;IAAC,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,KAAK;IAAC;EAAC,CAAC,CAAC;EAErE,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC;EACtC,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;EAEhE,MAAM,GAAG,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAG,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAQ;EAAC,CAAC,CAAC;EAE1E,OAAO,CAAC,6BAA6B,CAAC,IAAI,CAAC;EAC3C,OAAO,CAAC,6BAA6B,CAAC,GAAG,CAAC;EAE1C,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAAI;EAChB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}