{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n  const inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\nexport const addN = /* @__PURE__ */op({\n  addN_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/add_n.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAM,QAAO,WAAW;AAChC,SAAQ,IAAI,QAAmB,iBAAiB;AAGhD,SAAQ,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAK,IAAI,MAAM,SAAS;AAE/B,SAAQ,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;AAYG;AACH,SAAS,KAAK,CAAmB,OAA4B,EAAA;EAC3D,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EACtB,MAAM,4DAA4D,CAAC;EACvE,IAAI,CAAC,MAAM,CACP,OAAO,CAAC,MAAM,IAAI,CAAC,EACnB,MAAM,sDAAsD,GACxD,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;EAE5B,MAAM,QAAQ,GACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;EAEpE,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC;EAC/B,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAG;IACnB,IAAI,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE;MACjC,MAAM,IAAI,KAAK,CACX,0DAA0D,CAAC;IAChE;EACH,CAAC,CAAC;EAEF,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAG;IACnB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE;MACjD,MAAM,IAAI,KAAK,CACX,0DAA0D,CAAC;IAChE;EACH,CAAC,CAAC;EAEF,MAAM,MAAM,GAAe,QAAQ;EAEnC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,MAAmC,CAAC;AACpE;AAEA,OAAO,MAAM,IAAI,GAAG,eAAgB,EAAE,CAAC;EAAC;AAAK,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {AddN, AddNInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const inputs: AddNInputs = $tensors;\n\n  return ENGINE.runKernel(AddN, inputs as unknown as NamedTensorMap);\n}\n\nexport const addN = /* @__PURE__ */ op({addN_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}