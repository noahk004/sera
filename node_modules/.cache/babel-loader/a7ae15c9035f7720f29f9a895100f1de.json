{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  let done = false;\n  let res;\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n    }\n  }\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n  const outputShape = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n  return {\n    batchSize,\n    sliceSize,\n    outerSize,\n    dimSize,\n    outputShape\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/segment_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { TensorInfo } from '../tensor_info';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}