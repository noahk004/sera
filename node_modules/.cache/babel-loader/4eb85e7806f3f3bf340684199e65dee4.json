{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n  constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n  static getInstance() {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url) {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url, loadOptions) {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n  static getHandlers(url, handlerType, loadOptions) {\n    const validHandlers = [];\n    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\nexport const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/router_registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAOH,OAAM,MAAO,gBAAgB,CAAA;EAO3B,WAAA,CAAA,EAAA;IACE,IAAI,CAAC,WAAW,GAAG,EAAE;IACrB,IAAI,CAAC,WAAW,GAAG,EAAE;EACvB;EAEQ,OAAO,WAAW,CAAA,EAAA;IACxB,IAAI,gBAAgB,CAAC,QAAQ,IAAI,IAAI,EAAE;MACrC,gBAAgB,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAA,CAAE;IACnD;IACD,OAAO,gBAAgB,CAAC,QAAQ;EAClC;EAEA;;;;;AAKG;EACH,OAAO,kBAAkB,CAAC,UAAoB,EAAA;IAC5C,gBAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;EAC7D;EAEA;;;;;AAKG;EACH,OAAO,kBAAkB,CAAC,UAAoB,EAAA;IAC5C,gBAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;EAC7D;EAEA;;;;;;;AAOG;EACH,OAAO,eAAe,CAAC,GAAoB,EAAA;IACzC,OAAO,gBAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC;EAClD;EAEA;;;;;;;AAOG;EACH,OAAO,eAAe,CAAC,GAAoB,EAAE,WAAyB,EAAA;IAEpE,OAAO,gBAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,CAAC;EAC/D;EAEQ,OAAO,WAAW,CACtB,GAAoB,EAAE,WAA0B,EAChD,WAAyB,EAAA;IAC3B,MAAM,aAAa,GAAgB,EAAE;IACrC,MAAM,OAAO,GAAG,WAAW,KAAK,MAAM,GAClC,gBAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,WAAW,GAC1C,gBAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,WAAW;IAC9C,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;MACvB,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC;MACxC,IAAI,OAAO,KAAK,IAAI,EAAE;QACpB,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;MAC5B;IACH,CAAC,CAAC;IACF,OAAO,aAAa;EACtB;AACD;AAED,OAAO,MAAM,kBAAkB,GAAI,UAAoB,IACnD,gBAAgB,CAAC,kBAAkB,CAAC,UAAU,CAAC;AACnD,OAAO,MAAM,kBAAkB,GAAI,UAAoB,IACnD,gBAAgB,CAAC,kBAAkB,CAAC,UAAU,CAAC;AACnD,OAAO,MAAM,eAAe,GAAI,GAAoB,IAChD,gBAAgB,CAAC,eAAe,CAAC,GAAG,CAAC;AACzC,OAAO,MAAM,eAAe,GACxB,CAAC,GAAoB,EAAE,WAAyB,KAC5C,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,WAAW,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler, LoadOptions} from './types';\n\nexport type IORouter = (url: string|string[], loadOptions?: LoadOptions) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], loadOptions?: LoadOptions):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      loadOptions?: LoadOptions): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers =\n    (url: string|string[], loadOptions?: LoadOptions) =>\n        IORouterRegistry.getLoadHandlers(url, loadOptions);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}