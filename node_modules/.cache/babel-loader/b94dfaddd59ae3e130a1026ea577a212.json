{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { isTypedArrayBrowser } from './platforms/is_typed_array_browser';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n  return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array(a.length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n  return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\nexport function isTypedArray(a) {\n  // TODO(mattsoulanille): Remove this fallback in 5.0.0\n  if (env().platform.isTypedArray != null) {\n    return env().platform.isTypedArray(a);\n  } else {\n    return isTypedArrayBrowser(a);\n  }\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' || typeof arr === 'string' || base.isPromise(arr) || arr == null || isTypedArray(arr) && skipTypedArray) {\n    result.push(arr);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    let maxIndex = -1;\n    for (const key of Object.keys(arr)) {\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten(arr[i], result, skipTypedArray);\n    }\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from './environment';\nimport {isTypedArrayBrowser} from './platforms/is_typed_array_browser';\nimport {BackendValues, DataType, RecursiveArray, TensorLike, TypedArray} from './types';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(\n    value: DataType, dtype: DataType): BackendValues {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n\n  return toTypedArray([value], dtype);\n}\n\nfunction noConversionNeeded(a: TensorLike, dtype: DataType): boolean {\n  return (a instanceof Float32Array && dtype === 'float32') ||\n      (a instanceof Int32Array && dtype === 'int32') ||\n      (a instanceof Uint8Array && dtype === 'bool');\n}\n\nexport function toTypedArray(a: TensorLike, dtype: DataType): TypedArray {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = flatten(a);\n  }\n\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a as number[], dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a as TypedArray;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array((a as number[]).length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round((a as number[])[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now(): number {\n  return env().platform.now();\n}\n\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(\n    path: string, requestInits?: RequestInit): Promise<Response> {\n  return env().platform.fetch(path, requestInits);\n}\n\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s: string, encoding = 'utf-8'): Uint8Array {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes: Uint8Array, encoding = 'utf-8'): string {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}\n\nexport function isTypedArray(a: {}): a is Float32Array|Int32Array|Uint8Array|\n    Uint8ClampedArray {\n  // TODO(mattsoulanille): Remove this fallback in 5.0.0\n  if (env().platform.isTypedArray != null) {\n    return env().platform.isTypedArray(a);\n  } else {\n    return isTypedArrayBrowser(a);\n  }\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (typeof arr === 'boolean' || typeof arr === 'number' ||\n    typeof arr === 'string' || base.isPromise(arr) || arr == null ||\n      isTypedArray(arr) && skipTypedArray) {\n    result.push(arr as T);\n  } else if (Array.isArray(arr) || isTypedArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    let maxIndex = -1;\n    for (const key of Object.keys(arr)) {\n      // 0 or positive integer.\n      if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n        maxIndex = Math.max(maxIndex, Number(key));\n      }\n    }\n    for (let i = 0; i <= maxIndex; i++) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      flatten((arr as RecursiveArray<T>)[i], result, skipTypedArray);\n    }\n  }\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}