{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n    if (aType !== bType) {\n      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);\n    }\n  }\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n    if (!predicate(a, e)) {\n      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n    }\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nexport function expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nexport function expectArraysEqual(actual, expected) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error('Expected ArrayBuffer to be of length ' + `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(`Expected ArrayBuffer value at ${i} to be ` + `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n  return a;\n}\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source) {\n  const video = document.createElement('video');\n  if ('playsInline' in video) {\n    // tslint:disable-next-line:no-any\n    video.playsInline = true;\n  }\n  video.muted = true;\n  video.loop = true;\n  video.style.position = 'fixed';\n  video.style.left = '0px';\n  video.style.top = '0px';\n  video.preload = 'auto';\n  video.appendChild(source);\n  return new Promise(resolve => {\n    video.addEventListener('loadeddata', _ => resolve(video));\n    video.load();\n  });\n}\nexport async function play(video) {\n  await video.play();\n  if ('requestVideoFrameCallback' in video) {\n    await new Promise(resolve => {\n      // tslint:disable-next-line:no-any\n      video.requestVideoFrameCallback(resolve);\n    });\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/test_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, encodeString, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n  if (typeof expect !== 'undefined') {\n    expect().nothing();\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error(\n        'Expected ArrayBuffer to be of length ' +\n        `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(\n          `Expected ArrayBuffer value at ${i} to be ` +\n          `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a: RecursiveArray<{}>):\n    RecursiveArray<Uint8Array> {\n  for (let i = 0; i < (a as Array<{}>).length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val as string);\n    }\n  }\n  return a as RecursiveArray<Uint8Array>;\n}\n\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source: HTMLSourceElement):\n    Promise<HTMLVideoElement> {\n  const video = document.createElement('video');\n  if ('playsInline' in video) {\n    // tslint:disable-next-line:no-any\n    (video as any).playsInline = true;\n  }\n  video.muted = true;\n  video.loop = true;\n  video.style.position = 'fixed';\n  video.style.left = '0px';\n  video.style.top = '0px';\n\n  video.preload = 'auto';\n  video.appendChild(source);\n  return new Promise(resolve => {\n    video.addEventListener('loadeddata', _ => resolve(video));\n    video.load();\n  });\n}\n\nexport async function play(video: HTMLVideoElement) {\n  await video.play();\n  if ('requestVideoFrameCallback' in video) {\n    await new Promise(resolve => {\n      // tslint:disable-next-line:no-any\n      (video as any).requestVideoFrameCallback(resolve);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}