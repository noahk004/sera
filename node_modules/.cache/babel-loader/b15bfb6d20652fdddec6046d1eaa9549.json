{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpgpu) {\n    super();\n    // Maps data ids that have a pending read operation, to list of subscribers.\n    this.pendingRead = new WeakMap();\n    // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n    this.pendingDisposal = new WeakSet();\n    // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0;\n    // Accumulated time spent (including blocking) in uploading data to webgl.\n    this.uploadWaitMs = 0;\n    // Accumulated time spent (including blocking in downloading data from webgl.\n    this.downloadWaitMs = 0;\n    // record the last manual GL Flush time.\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let result;\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n    let buffer = null;\n    let tmpDownloadTarget;\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = data.map(d => util.decodeString(d));\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n  async time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n    };\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n        name: flattenedActiveTimerNames[i],\n        ms: d\n      })).map(d => `${d.name}: ${d.ms}`).join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n    this.texData.delete(dataId);\n    return true;\n  }\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  makeOutput(shape, dtype, values) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n  }\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n  decode(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n    const denseTexShape = tex_util.getDenseTexShape(shapeAs3D);\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [denseTexShape];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n      let texData = this.texData.get(input.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n        height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/backend_webgl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    const denseTexShape = tex_util.getDenseTexShape(shapeAs3D);\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [denseTexShape];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customUniformValues);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}