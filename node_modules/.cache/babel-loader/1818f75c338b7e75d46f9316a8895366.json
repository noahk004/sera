{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n  const registerMonitor = promise => {\n    promise.then(value => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n  }\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);\n    assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);\n    assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);\n  }\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/progress.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAM,QAAO,SAAS;AAI9B;;;;;;;AAOG;AACH,OAAM,SAAU,uBAAuB,CACnC,QAAiC,EAAE,UAA8B,EACjE,aAAsB,EAAE,WAAoB,EAAA;EAC9C,aAAa,CAAC,QAAQ,CAAC;EACvB,aAAa,GAAG,aAAa,IAAI,IAAI,GAAG,CAAC,GAAG,aAAa;EACzD,WAAW,GAAG,WAAW,IAAI,IAAI,GAAG,CAAC,GAAG,WAAW;EACnD,aAAa,CAAC,aAAa,EAAE,WAAW,CAAC;EACzC,IAAI,eAAe,GAAG,CAAC;EAEvB,MAAM,eAAe,GAAI,OAAoB,IAAI;IAC/C,OAAO,CAAC,IAAI,CAAC,KAAK,IAAG;MACnB,MAAM,QAAQ,GAAG,aAAa,GAC1B,EAAE,eAAe,GAAG,QAAQ,CAAC,MAAM,IAAI,WAAW,GAAG,aAAa,CAAC;MACvE;MACA,UAAU,CAAC,QAAQ,CAAC;MACpB,OAAO,KAAK;IACd,CAAC,CAAC;IACF,OAAO,OAAO;EAChB,CAAC;EAED,SAAS,aAAa,CAAC,QAAiC,EAAA;IACtD,MAAM,CACF,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAClE,MAAM,qCAAqC,CAAC;EAClD;EAEA,SAAS,aAAa,CAAC,aAAqB,EAAE,WAAmB,EAAA;IAC/D,MAAM,CACF,aAAa,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,EACxC,MAAM,iDAAiD,GACnD,qBAAqB,aAAa,EAAE,CAAC;IAC7C,MAAM,CACF,WAAW,IAAI,CAAC,IAAI,WAAW,IAAI,CAAC,EACpC,MAAM,iDAAiD,GACnD,mBAAmB,WAAW,EAAE,CAAC;IACzC,MAAM,CACF,WAAW,IAAI,aAAa,EAC5B,MAAM,sDAAsD,GACxD,qBAAqB,aAAa,mBAAmB,GACrD,GAAG,WAAW,EAAE,CAAC;EAC3B;EAEA,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACnD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}